/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package autosysteem;

import domain_simulation.Osmosis;
import domain_simulation.Simulation;
import domain_simulation.Vehicle;
import java.awt.BorderLayout;
import java.awt.Color;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import javax.swing.UIManager;
import openstreetmaps.org.openstreetmap.gui.CarGraphic;
import openstreetmaps.org.openstreetmap.gui.jmapviewer.JMapViewer;
import openstreetmaps.org.openstreetmap.gui.jmapviewer.OsmTileLoader;
import openstreetmaps.org.openstreetmap.gui.jmapviewer.events.JMVCommandEvent;
import openstreetmaps.org.openstreetmap.gui.jmapviewer.interfaces.JMapViewerEventListener;
import openstreetmaps.org.openstreetmap.gui.jmapviewer.tilesources.OsmTileSource;
import org.openstreetmap.osmosis.core.domain.v0_6.Node;

/**
 *
 * @author Eagle
 */
public class Frame extends javax.swing.JFrame implements JMapViewerEventListener
{

    private static final int DESIRED_FOCUS_ZOOM = 10;
    private static final int DESIRED_ROUTE_WIDTH = 5;
    private static final Color DESIRED_DEFAULT_CAR_COLOR = Color.gray;
    private static final Color DESIRED_HIGHLIGHT_CAR_COLOR = Color.BLUE;
    private static final long CAR_SIMULATION_STEP = 500;
    private JMapViewer map;
    private double meterPerPixel;
    private double zoom;
    private Simulation sim;

    /**
     * Creates new form Frame
     */
    public Frame()
    {
        super("Autosysteem");

        try
        {
            UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
        } catch (Exception e)
        {
            e.printStackTrace();
        }

        initComponents();
        setLayout(new BorderLayout());

        // Add the map to the form and fill in settings
        addMap();

        // map.highlightCarGraphic("t1");

//        Coordinate one = new Coordinate(51.4560332, 5.5380103);
//        Coordinate two = new Coordinate(51.455726, 5.5326495);
//        List<Coordinate> route = new ArrayList<Coordinate>(Arrays.asList(one, two, two));
        //map.addMapPolygon(new MapPolygonImpl(route));

        // Fill the comboBox.
        currentCarComboBox.removeAllItems();

        for (CarGraphic c : map.getAllCarGraphics())
        {
            currentCarComboBox.addItem(c.getCarTrackerId());
        }


        //Simulation stuff happens here
        sim = new Simulation(jsInterval.getValue(), CAR_SIMULATION_STEP, this);
        for (Vehicle c : sim.getGarage().getCars())
        {
            currentCarComboBox.addItem(c.getCarTrackerId());
        }

        if (Osmosis.init())
        {
            validate();
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents()
    {

        mapPanel = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        infoLabel = new javax.swing.JLabel();
        ownerLabel = new javax.swing.JLabel();
        numberOfCarsLabel = new javax.swing.JLabel();
        currentCarComboBox = new javax.swing.JComboBox();
        infoLabel2 = new javax.swing.JLabel();
        infoLabel3 = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        jsInterval = new javax.swing.JSlider();
        jScrollPane1 = new javax.swing.JScrollPane();
        outputPane = new javax.swing.JTextArea();
        lbInterval = new javax.swing.JLabel();
        btStartSimulation = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        cbShowRoute = new javax.swing.JCheckBox();
        jLabel1 = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        btAddCar = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(140, 218, 195));
        setResizable(false);

        mapPanel.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));

        javax.swing.GroupLayout mapPanelLayout = new javax.swing.GroupLayout(mapPanel);
        mapPanel.setLayout(mapPanelLayout);
        mapPanelLayout.setHorizontalGroup(
            mapPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 531, Short.MAX_VALUE)
        );
        mapPanelLayout.setVerticalGroup(
            mapPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        jPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED));

        infoLabel.setText("Eigenaar: ");

        ownerLabel.setText("jLabel1");

        numberOfCarsLabel.setText("jLabel1");

        currentCarComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        currentCarComboBox.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                currentCarComboBoxActionPerformed(evt);
            }
        });

        infoLabel2.setText("Aantal auto's:");

        infoLabel3.setText("Huidige auto");

        jsInterval.setMaximum(10000);
        jsInterval.setMinimum(100);
        jsInterval.setValue(5000);
        jsInterval.addChangeListener(new javax.swing.event.ChangeListener()
        {
            public void stateChanged(javax.swing.event.ChangeEvent evt)
            {
                jsIntervalStateChanged(evt);
            }
        });

        outputPane.setEditable(false);
        outputPane.setColumns(20);
        outputPane.setFont(new java.awt.Font("Mongolian Baiti", 0, 13)); // NOI18N
        outputPane.setRows(5);
        jScrollPane1.setViewportView(outputPane);

        lbInterval.setText("-");

        btStartSimulation.setText("Start Simulatie");
        btStartSimulation.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                btStartSimulationActionPerformed(evt);
            }
        });

        jLabel2.setText("Timestep");

        cbShowRoute.setText("Toon route");
        cbShowRoute.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                cbShowRouteActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(7, 7, 7)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jSeparator1)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(cbShowRoute))
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(infoLabel)
                                    .addComponent(infoLabel2))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(ownerLabel, javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(numberOfCarsLabel, javax.swing.GroupLayout.Alignment.TRAILING)))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(infoLabel3)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(currentCarComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addContainerGap())))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 46, Short.MAX_VALUE)
                        .addComponent(lbInterval, javax.swing.GroupLayout.PREFERRED_SIZE, 18, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jsInterval, javax.swing.GroupLayout.PREFERRED_SIZE, 192, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(btStartSimulation, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(infoLabel)
                    .addComponent(ownerLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(numberOfCarsLabel)
                    .addComponent(infoLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(currentCarComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(infoLabel3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(cbShowRoute)
                .addGap(14, 14, 14)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 12, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btStartSimulation)
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jsInterval, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(18, 18, 18))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lbInterval, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel2))
                        .addGap(18, 18, 18)))
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 372, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jLabel1.setText("Welkom.");

        jMenu1.setText("Simulatie");

        btAddCar.setText("Auto toevoegen...");
        btAddCar.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                btAddCarActionPerformed(evt);
            }
        });
        jMenu1.add(btAddCar);

        jMenuBar1.add(jMenu1);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(mapPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jLabel1)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(mapPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel1)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /////TEMP?
    public JMapViewer getMap()
    {
        return map;
    }

    public void setOutputText(String text)
    {
        this.outputPane.append(text);
    }
    /////TEMP?

    private void btAddCarActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_btAddCarActionPerformed
    {//GEN-HEADEREND:event_btAddCarActionPerformed
        String result = JOptionPane.showInputDialog("Vul een cartracker-id in.");
        int routeAmount = Integer.parseInt(JOptionPane.showInputDialog(null, "Hoeveel wegen moet de route van deze auto bevatten?"));

        //TODO: AFVANGEN
        ArrayList<Node> route = Osmosis.plotPath(routeAmount);

//TODO: AFVANGEN
        for (Node n : route)
        {
            // map.addMapMarker(new MapMarkerDot(Color.yellow, n.getLatitude(), n.getLongitude()));
        }

        Vehicle c = null;
        System.out.println(result);

        if (result != null)
        {
            if (result.length() != 0)
            {
                // x / 3600 / 2 = value
                //0.22 = 80km/h
                // x * 2 = km/s. 
                //TODO: DATABASE AUTO
                c = new Vehicle(result, route, 0.011);
                sim.addCar(c, route);
                map.addCarGraphic(c.getCarGraphic());

                currentCarComboBox.removeAllItems();
                for (Vehicle c2 : sim.getGarage().getCars())
                {
                    currentCarComboBox.addItem(c2.getCarTrackerId());
                }
                validate();
            } else
            {
                JOptionPane.showMessageDialog(null, "Geen geldig cartracker-id ingevuld.");
            }
        }
    }//GEN-LAST:event_btAddCarActionPerformed

    private void btStartSimulationActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_btStartSimulationActionPerformed
    {//GEN-HEADEREND:event_btStartSimulationActionPerformed
        if (sim != null)
        {
            if (!sim.isRunning())
            {
                sim.start();
                btStartSimulation.setText("Stop Simulatie");
            } else
            {
                sim.stop();
                btStartSimulation.setText("Start Simulatie");
            }
        }
    }//GEN-LAST:event_btStartSimulationActionPerformed

    private void jsIntervalStateChanged(javax.swing.event.ChangeEvent evt)//GEN-FIRST:event_jsIntervalStateChanged
    {//GEN-HEADEREND:event_jsIntervalStateChanged
        sim.changeTimestepInterval(jsInterval.getValue());
        int seconds = jsInterval.getValue() / 1000;
        lbInterval.setText(String.valueOf(seconds));
    }//GEN-LAST:event_jsIntervalStateChanged

    private void currentCarComboBoxActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_currentCarComboBoxActionPerformed
    {//GEN-HEADEREND:event_currentCarComboBoxActionPerformed
        map.removeAllMapPolygons();
        if (currentCarComboBox != null && currentCarComboBox.getSelectedItem() != null)
        {
            for (Vehicle car : sim.getGarage().getCars())
            {
                CarGraphic c = car.getCarGraphic();
                if (((String) currentCarComboBox.getSelectedItem()).equals(car.getCarTrackerId()))
                {
                    map.setDisplayPositionByLatLon(car.getPosition().getLatitudeInDegrees(), car.getPosition().getLongitudeInDegrees(), DESIRED_FOCUS_ZOOM);
                    c.highlight(DESIRED_HIGHLIGHT_CAR_COLOR);
                    map.repaint();

                    if (cbShowRoute.isSelected())
                    {
                        map.drawRoute(car.getRoute().getRoute());
                    }
                    // map.highlightCarGraphic((String) currentCarComboBox.getSelectedItem());
                } else
                {
                    c.highlight(DESIRED_DEFAULT_CAR_COLOR);
                    map.repaint();
                }
            }
        }
    }//GEN-LAST:event_currentCarComboBoxActionPerformed

    private void cbShowRouteActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_cbShowRouteActionPerformed
    {//GEN-HEADEREND:event_cbShowRouteActionPerformed

        if (cbShowRoute.isSelected())
        {
            //If box is checked, and if car is not null/cartracker is not null
            if (currentCarComboBox != null && currentCarComboBox.getSelectedItem() != null)
            {
                for (Vehicle car : sim.getGarage().getCars())
                {
                    //Get the cars route
                    ArrayList<Node> route = car.getRoute().getRoute();
                    if (((String) currentCarComboBox.getSelectedItem()).equals(car.getCarTrackerId()))
                    {
                        //And draw the route
                        map.drawRoute(route);

                    } else
                    {
                        //If car does not equal the thing
                        map.removeAllMapPolygons();
                    }
                }
            }
        } //Check box is deselected
        else
        {
            map.removeAllMapPolygons();
        }

    }//GEN-LAST:event_cbShowRouteActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[])
    {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try
        {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels())
            {
                if ("Nimbus".equals(info.getName()))
                {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex)
        {
            java.util.logging.Logger.getLogger(Frame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex)
        {
            java.util.logging.Logger.getLogger(Frame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex)
        {
            java.util.logging.Logger.getLogger(Frame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex)
        {
            java.util.logging.Logger.getLogger(Frame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable()
        {
            public void run()
            {
                new Frame().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem btAddCar;
    private javax.swing.JButton btStartSimulation;
    private javax.swing.JCheckBox cbShowRoute;
    private javax.swing.JComboBox currentCarComboBox;
    private javax.swing.JLabel infoLabel;
    private javax.swing.JLabel infoLabel2;
    private javax.swing.JLabel infoLabel3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSlider jsInterval;
    private javax.swing.JLabel lbInterval;
    private javax.swing.JPanel mapPanel;
    private javax.swing.JLabel numberOfCarsLabel;
    private javax.swing.JTextArea outputPane;
    private javax.swing.JLabel ownerLabel;
    // End of variables declaration//GEN-END:variables

    private void updateZoomParameters()
    {
        meterPerPixel = map.getMeterPerPixel();
        zoom = map.getZoom();
    }

    @Override
    public void processCommand(JMVCommandEvent command)
    {
        if (command.getCommand().equals(JMVCommandEvent.COMMAND.ZOOM)
                || command.getCommand().equals(JMVCommandEvent.COMMAND.MOVE))
        {
            updateZoomParameters();
        }
    }

    public void addMap()
    {
        // Instantiate the map
        map = new JMapViewer();

        // Listen to the map viewer for user operations so components will
        // recieve events and update
        map.addJMVListener(this);

        // Set the tile source:
        // Other options are: 
        // OsmTileSource.CycleMap(), new BingAerialTileSource(), new MapQuestOsmTileSource(), new MapQuestOpenAerialTileSource()
        map.setTileSource(new OsmTileSource.Mapnik());

        // Set the tileloader
        map.setTileLoader(new OsmTileLoader(map));

        // Set the zoom controls to show on the map
        map.setZoomContolsVisible(true);

        // Set the layout for the map panel
        mapPanel.setLayout(new BorderLayout());

        // Add the JMapViewer component to the panel
        mapPanel.add(map, BorderLayout.CENTER);

        mapPanel.validate();
    }
}
